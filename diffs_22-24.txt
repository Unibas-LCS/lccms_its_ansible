diff -r 22.04/its/adbind/defaults/main.yml 24.04/its/adbind/defaults/main.yml
1a2,3
> its_adbind:
>   needAD: "{{ (cmdb.Unibas_MDMLCCMSAuthMethod != 'local') | bool }}"

diff -r 22.04/its/adbind/tasks/main.yml 24.04/its/adbind/tasks/main.yml
5a6
>   when: its_adbind.needAD
12a14
>   when: its_adbind.needAD

diff -r 22.04/its/ansible/defaults/main.yml 24.04/its/ansible/defaults/main.yml
3c3
<   managed: "{{ (lccms.configuration  == 'managed') | bool }}"
---
>   managed: "{{ ((cmdb.Unibas_Managed  in ['managed', 'selfmanaged']) and (cmdb.Status != 'retired')) | bool }}"

diff -r 22.04/its/ansible/tasks/main.yml 24.04/its/ansible/tasks/main.yml
62a63
>     force: true

diff -r 22.04/its/ansible/templates/ansibleRun.sh 24.04/its/ansible/templates/ansibleRun.sh
13,17c13,18
< UNIT={{ lccms.unit }}
< LCCMSOS={{ lccms.os | default('') }}
< LCCMSRELEASE={{ lccms.release | default('') }}
< LCCMSCONFIGURATION={{ lccms.configuration }}   # managed, self-managed, unmanaged
< MACHINESTATE={{ lccms.status }}  # active, retired, ...
---
> UNIT={{ cmdb.Unibas_MDMLCCMSConfigPath }}
> LCCMSOSNAME={{ lccms.OS_Name | default('') }}        # This is as from ansible.
> LCCMSOSVERSION={{ lccms.OS_Version | default('') }}  # This is as from ansible.
> LCCMSCONFIGURATION={{ cmdb.Unibas_Managed }}   # managed, selfmanaged, unmanaged
> MACHINESTATE={{ cmdb.Status }}  # active, retired, 'in stock', ...
> RECID={{ cmdb.RecId }}
33,34c34,35
< OS=`/usr/bin/lsb_release -si`
< RELEASE=`/usr/bin/lsb_release -sr`
---
> OSNAME=`/usr/bin/lsb_release -si`
> OSVERSION=`/usr/bin/lsb_release -sr`
41,42c42,43
< out "  OS: $OS"
< out "  release: $RELEASE"
---
> out "  OS: $OSNAME"
> out "  version: $OSVERSION"
84,85c85
< outn "Updating host playbook ... "
< if [[ "$OS" != "$LCCMSOS" || "$RELEASE" != "$LCCMSRELEASE" ]]
---
> if [[ "$OSNAME" != "$LCCMSOSNAME" || "$OSVERSION" != "$LCCMSOSVERSION" ]]
86a87
>   outn "Regenerating playbook ... "
89c90
<   /usr/bin/wget -q --content-disposition "${REPORTSURI}get/playbook?unit=${UNIT}&host=${HOST}&os=${OS}&release=${RELEASE}"
---
>   /usr/bin/wget -q --content-disposition "${REPORTSURI}get/playbook?recid=${RECID}&unit=${UNIT}&host=${HOST}&os=${OSNAME}&version=${OSVERSION}"
96a98
>   outn "Updating host playbook ... "
103,105c105,107
< # All directories of OS and RELEASE are lower case
< LCOS=`echo $OS | /usr/bin/tr '[A-Z]' '[a-z]'`
< LCRELEASE=` echo $RELEASE | /usr/bin/tr '[A-Z]' '[a-z]'`
---
> # Convert to lower case for directory use.
> LCOSNAME=`echo $OSNAME | /usr/bin/tr '[A-Z]' '[a-z]'`
> LCOSVERSION=` echo $OSVERSION | /usr/bin/tr '[A-Z]' '[a-z]'`
110c112
< for r in `/usr/bin/sed -n '/roles:/,$!d; / *- /s/ *- //p' ../${HOST}.yml`
---
> for r in `/usr/bin/sed -n '/roles:/,$!d; /^ *- /s/ *- //p' ../${HOST}.yml`
114c116
<   /usr/bin/wget -q -N -e robots=off --timestamping --no-parent -r -l 8 -nH --cut-dirs=3 -R '*.html*' --execute='robots = off' ${ROLESURI}${LCOS}/${LCRELEASE}/${s}/
---
>   /usr/bin/wget -q -N -e robots=off --timestamping --no-parent -r -l 8 -nH --cut-dirs=3 -R '*.html*' --execute='robots = off' ${ROLESURI}${LCOSNAME}/${LCOSVERSION}/${s}/
124c126
<   if [[ "$LCCMSCONFIGURATION" == "self-managed" ]]
---
>   if [[ "$LCCMSCONFIGURATION" == "selfmanaged" ]]
131a134
> 
134,135c137,140
< /usr/bin/rm -f ~/ansible.log
< export ANSIBLE_LOG_PATH=~/ansible.log
---
> /usr/bin/rm -f ${ANSIBLEDIR}/ansible.log
> export ANSIBLE_LOG_PATH=${ANSIBLEDIR}/ansible.log
> # If debugging is needed, set the following: (levels 0-4) -- or use the -vvvv options
> export ANSIBLE_VERBOSITY=0
139,140c144,145
< /usr/bin/sed 's/[^|]*| //' ~/ansible.log >>$LOGFILE
< /usr/bin/rm ~/ansible.log
---
> /usr/bin/sed 's/[^|]*| //' ${ANSIBLEDIR}/ansible.log >>$LOGFILE
> /usr/bin/rm ${ANSIBLEDIR}/ansible.log
146c151
<   out "Users which were not in /etc/passwd will have their password set to their login name."
---
>   out "Users which were not in /etc/passwd or had no password will have their password set to their login name."
164a170,173
>     elif /usr/bin/egrep "$uid:.:" /etc/shadow
>     then
>       out "Setting password for user $uid to $uid."
>       echo "$uid:$uid" |  /usr/sbin/chpasswd
184a194,196
>   /usr/bin/rm -rf /etc/systemd/system/ansible.timer
>   /usr/bin/rm -rf /etc/systemd/system/ansible.service
>   /usr/bin/systemctl daemon-reload

diff -r 22.04/its/cleanup/tasks/main.yml 24.04/its/cleanup/tasks/main.yml
7,20c7,10
< - name: Register a variable
<   ansible.builtin.shell: dpkg -l | grep firefox
<   register: dpkg_output
<   changed_when: false
< 
< - name: Use the variable in conditional statement
<   ansible.builtin.shell: apt install -y firefox --allow-downgrades
<   when: dpkg_output.stdout.find('Transitional') != -1
< 
< - name: Retrieve the list of home directories
<   ansible.builtin.command: 
<     cmd: ls /home
<   changed_when: False
<   register: home_dirs
---
> - name: "Remove update script."
>   file:
>     path: "/opt/update_to_24.04.sh"
>     state: absent
22,25c12,14
< - name: Removes unused shares from the bookmarks of Nautilus
<   lineinfile:
<     dest: /home/{{ item }}/.config/gtk-3.0/bookmarks
<     line: "smb://unibasel.ads.unibas.ch/itscklb Unibas Share"
---
> - name: "Remove update update script."
>   file:
>     path: "/opt/update_to_24.04_update.sh"
27,28d15
<   loop: "{{ home_dirs.stdout_lines }}"
<   ignore_errors: True
30,33c17,19
< - name: Removes unused shares from the bookmarks of Nautilus
<   lineinfile:
<     dest: /home/{{ item }}/.config/gtk-3.0/bookmarks
<     line: "smb://unibasel.ads.unibas.ch/itscklb/ Unibas Share"
---
> - name: "Remove update sudoers file."
>   file:
>     path: "/etc/sudoers.d/update"
35,36d20
<   loop: "{{ home_dirs.stdout_lines }}"
<   ignore_errors: True
\ No newline at end of file

diff -r 22.04/its/defaultsoftware/defaults/main.yml 24.04/its/defaultsoftware/defaults/main.yml
7,8c7,8
<   snap:
<     - teams-for-linux
---
> 
>   snap: []

diff -r 22.04/its/defaultsoftware/tasks/main.yml 24.04/its/defaultsoftware/tasks/main.yml
2c2,3
< - name: "Install default apt packages. </br>\n {{ its_defaultsoftware.apt | replace(',', '</br>\n') | replace('[', '') | replace(']', '') | replace(\"'\", '') }}"
---
> # Install any listet apt and snap packages.
> - name: "Install default packages. </br>\n {{ its_defaultsoftware.apt | replace(',', '</br>\n') | replace('[', '') | replace(']', '') | replace(\"'\", '') }}"

diff -r 22.04/its/diskencryption/files/diskkey 24.04/its/diskencryption/files/diskkey
2c2
< # This script will allow a user to set or change the disk encyption key (password) for slot 1
---
> # This script will allow a user to set or change the disk encryption key (password) for slot 2
4,8c4,8
< DISK=`/usr/bin/cut -d" " -f1 /etc/crypttab`
< if [ ! -b /dev/$DISK ]
< then
<   DISK=${DISK%_?????}
< fi
---
> MAPPED_NAME=$(/usr/bin/cut -d" " -f1 /etc/crypttab)
> 
> BACKING_DEV=$(/usr/sbin/cryptsetup status $MAPPED_NAME 2>/dev/null | /usr/bin/grep "device:" | /usr/bin/awk '{print $2}')
> 
> echo "Using device: $BACKING_DEV for LUKS operations"
12,14c12,14
<     echo "Please enter the administrator's password when propmted for an existing and remaining passphrase."
<     /usr/bin/sudo /usr/sbin/cryptsetup luksKillSlot /dev/$DISK 2 2>/dev/null
<     /usr/bin/sudo /usr/sbin/cryptsetup --key-slot=2 luksAddKey /dev/$DISK
---
>     echo "Please enter the administrator's password when prompted for an existing and remaining passphrase."
>     sudo /usr/sbin/cryptsetup luksKillSlot $BACKING_DEV 2 2>/dev/null
>     sudo /usr/sbin/cryptsetup --key-slot=2 luksAddKey $BACKING_DEV
17c17
<     /usr/bin/sudo /usr/sbin/cryptsetup --key-slot=2 luksChangeKey /dev/$DISK
---
>     sudo /usr/sbin/cryptsetup --key-slot=2 luksChangeKey $BACKING_DEV
21c21
<     diskkey update"
---
>        diskkey update"
24d23
< 

diff -r 22.04/its/diskencryption/tasks/main.yml 24.04/its/diskencryption/tasks/main.yml
2c2
< # Simply install the user scripts to set the password.
---
> # Simply install the user scripts to set the disk encryption password.

diff -r 22.04/its/eduroam/tasks/main.yml 24.04/its/eduroam/tasks/main.yml
2c2
< - name: "Copy eduroam certificate in place"
---
> - name: "Copy the eduroam certificate in place."
6c6
<     mode: 0444
\ No newline at end of file
---
>     mode: 0444

diff -r 22.04/its/etckeeper/meta/params.yml 24.04/its/etckeeper/meta/params.yml
2a3,4
>   public: ~
>   private: ~

diff -r 22.04/its/firefox/tasks/main.yml 24.04/its/firefox/tasks/main.yml
20,25d19
< - name: "Copy Firefox snap blocking file in place."
<   copy:
<     src: firefox
<     dest: /etc/apt/preferences.d/block-firefox-snap
<     mode: '0644'
< 
32c26
< - name: Purge firefox
---
> - name: "Purge any old firefox if snap was removed."
45c39
< - name: "Adapt favorites."
---
> - name: "Adapt favorites if newly installed."
52c46
< - name: "Compile schemas."
---
> - name: "Compile schemas if newly installed."

diff -r 22.04/its/firewall/meta/params.yml 24.04/its/firewall/meta/params.yml
3,18c3,28
<   its_firewall:
<     state:
<       type: choice
<       default: 'block'
<       comment: The forced state of the firewall. This still allows adding or removing rules as needed.
<       options:
<       - label: Block
<         value: 'block'
<         comment: Block all incoming traffic not listed, allow all outgoing.
<       - label: Allow
<         value: 'allow'
<         comment: Allow all traffic.
<     apps:
<       type: list
<       default: []
<       comment: The array of application names for which to allow incoming traffic.
---
>   public:
>     its_firewall:
>       state:
>         kind: option
>         default: 'block'
>         comment: The forced state of the firewall. This still allows adding or removing rules as needed.
>         options:
>         - value: 'block'
>           comment: Block all incoming traffic not listed, allow all outgoing.
>         - value: 'allow'
>           comment: Allow all traffic.
>       apps:
>         kind: array
>         default: []
>         comment: The array of application names for which to allow incoming traffic.
>   private:
>     its_firewall:
>       system:
>         kind: option
>         options:
>         - value: 'mobile'
>           comment: The system is not always connected via ethernet.
>         - value: 'workstation'
>           comment: The system is stationary and always connected via ethernet.
>         default: "{{ lccms.computerType }}"
>         comment: The kind of system. This is either mobile or workstation.

diff -r 22.04/its/firewall/tasks/main.yml 24.04/its/firewall/tasks/main.yml
17c17
< - name: "Enable UFW and allow all traffic."
---
> - name: "Enable UFW and allow all traffic if state is 'allow'."


diff -r 22.04/its/globalprotect/defaults/main.yml 24.04/its/globalprotect/defaults/main.yml
3c3
<   kind: "{{ lccms.computerType }}"
---
>   kind: "{{ cmdb.Unibas_Stationary }}"
Only in 24.04/its/globalprotect/files: GlobalProtect_UI_focal_deb-6.2.1.1-276.deb
Only in 24.04/its/globalprotect/files: GlobalProtect_UI_focal_deb-6.2.1.1-7.deb
Only in 24.04/its/globalprotect/files: restoregp.sh

diff -r 22.04/its/globalprotect/tasks/main.yml 24.04/its/globalprotect/tasks/main.yml
4c4
< - name: "Install resolvconf for GP version 6.1.3."
---
> - name: "Install resolvconf for GP."
6c6
<     name: resolvconf
---
>     name: systemd-resolved
9a10,20
> - name: "Check if the lccms repo is installed"
>   stat:
>     path: "/etc/apt/sources.list.d/lccms.list"
>   register: lccmsrepo
> 
> - name: "Install the Global Protect APT Package."
>   ansible.builtin.apt:
>     name: "globalprotect"
>     state: present
>   when: its_globalprotect.kind == 'mobile' and lccmsrepo.stat.exists
> 
14c25
<   when: its_globalprotect.kind == 'mobile'
---
>   when: its_globalprotect.kind == 'mobile' and not lccmsrepo.stat.exists

diff -r 22.04/its/groups/meta/params.yml 24.04/its/groups/meta/params.yml
3,14c3,4
<   its_groups:
<     groups:
<       type: table
<       cols:
<         name:
<           type: string
<           cols: 32
<           label: Name
<         gidnumber:
<           type: string
<           cols: 8
<           label: ID
---
>   public: ~
>   private: ~

diff -r 22.04/its/groups/tasks/main.yml 24.04/its/groups/tasks/main.yml
4c4
< # Each entry ''dmi_groups.groups'' in the list of groups must be a record with the keys
---
> # Each entry ''its_groups.groups'' in the list of groups must be a record with the keys
9c9
< - name: "groups: Ensure all groups are present."
---
> - name: "Ensure all required groups are present."

diff -r 22.04/its/login/files/ubuntu-gdm-set-background 24.04/its/login/files/ubuntu-gdm-set-background
19c19
< elif [ "$codename" == "impish" ] || [ "$codename" == "jammy" ] || [ "$codename" == "kinetic" ] && [ "$osname" == '"Ubuntu"' ]; then
---
> elif [ "$codename" == "impish" ] || [ "$codename" == "jammy" ] || [ "$codename" == "noble" ] && [ "$osname" == '"Ubuntu"' ]; then

Only in 24.04/its: lpadmin

diff -r 22.04/its/mde/defaults/main.yml 24.04/its/mde/defaults/main.yml
3d2
< #  alternative_file: "mdatp_custom.json.j2"

diff -r 22.04/its/mde/tasks/main.yml 24.04/its/mde/tasks/main.yml
44,50d43
< - name: "Remove old Microsoft apt repository for MDATP."
<   apt_repository:
<     repo: deb [arch=arm64,armhf,amd64] https://packages.microsoft.com/ubuntu/{{ ansible_distribution_version }}/prod {{ ansible_distribution_release }} main
<     update_cache: yes
<     state: absent
<     filename: microsoft-prod
< 
53c46
<     repo: deb [arch=arm64,armhf,amd64 signed-by=/etc/apt/keyrings/microsoft.asc] https://packages.microsoft.com/ubuntu/{{ ansible_distribution_version }}/prod {{ ansible_distribution_release }} main
---
>     repo: deb [arch=arm64,armhf,amd64 signed-by=/etc/apt/keyrings/microsoft.asc] https://packages.microsoft.com/ubuntu/22.04/prod jammy main

diff -r 22.04/its/mta/defaults/main.yml 24.04/its/mta/defaults/main.yml
4c4
<   system: "{{ lccms.computerType }}"
---
>   system: "{{ cmdb.Unibas_Stationary }}"


diff -r 22.04/its/networking/tasks/main.yml 24.04/its/networking/tasks/main.yml
1a2,6
> - name: "Install polkitd-pkla package because otherwise it does not work anymore"
>   apt:
>     name: polkitd-pkla
>     state: present
> 

diff -r 22.04/its/report/defaults/main.yml 24.04/its/report/defaults/main.yml
6c6
<   unit: "{{ lccms.unit }}"
---
>   unit: "{{ cmdb.Unibas_MDMLCCMSConfigPath }}"

diff -r 22.04/its/report/tasks/main.yml 24.04/its/report/tasks/main.yml
42c42
<       userAdminRights: "{{ admin_rights_granted.stdout }}"
---
>       Unibas_AdminRightsGranted: "{{ admin_rights_granted.stdout }}"

diff -r 22.04/its/restartnotify/tasks/main.yml 24.04/its/restartnotify/tasks/main.yml
2c2
< - name: Create /usr/local/share/restartnotify directory
---
> - name: "Create /usr/local/share/restartnotify directory."
10c10
< - name: Copy unibas logo in place
---
> - name: "Copy unibas logo in place."
18c18
< - name: Copy restart notifier script in place
---
> - name: "Copy restart notifier script in place."
26c26
< - name: Copy restart notifier unit file in place
---
> - name: "Copy restart notifier unit file in place."
34c34
< - name: Copy restart notifier timer in place
---
> - name: "Copy restart notifier timer in place."
44c44
< - name: Copy restart notifier trigger script in place
---
> - name: "Copy restart notifier trigger script in place."
52c52
< - name: Copy restart notifier trigger unit file in place
---
> - name: "Copy restart notifier trigger unit file in place."
60c60
< - name: Copy restart notifier path trigger in place
---
> - name: "Copy restart notifier path trigger in place."
70c70
< - name: enable unibas_restart_notifier_trigger path
---
> - name: "Enable unibas_restart_notifier_trigger path."
76c76
< - name: enable unibas_restart_notifier timer
---
> - name: "Enable unibas_restart_notifier timer."

diff -r 22.04/its/setfqdn/defaults/main.yml 24.04/its/setfqdn/defaults/main.yml
7c7
<   kind: "{{ lccms.computerType }}"
---
>   kind: "{{ cmdb.Unibas_Stationary }}"

diff -r 22.04/its/ssh/defaults/main.yml 24.04/its/ssh/defaults/main.yml
1a2,4
> # ATTENTION: boolean values to set in the config file MUST have a trailing space when
> # specifying them here as a string. Otherwise these will be converted to booleans,
> # however, the config file expects strings.

diff -r 22.04/its/ssh/meta/params.yml 24.04/its/ssh/meta/params.yml
3,15c3,17
<   its_ssh:
<     sshd:
<       kind: block
<       comment: |
<         Settings for the ssh daemon.</br>
<         Each entry designates an option and its value as used in the sshd configuration file.</br>
<         Beware that the strings "yes " and "no " need to have a space or ansible will convert to boolean.
<     ssh:
<       kind: block
<       comment: |
<         Settings for the ssh client.</br>
<         Each entry designates an option and its value as used in the sshd configuration file.
<         Beware that the strings "yes " and "no " need to have a space or ansible will convert to boolean.
---
>   public:
>     its_ssh:
>       sshd:
>         kind: record
>         comment: |
>           Settings for the ssh daemon.</br>
>           Each entry designates an option and its value as used in the sshd configuration file.</br>
>           Beware that the strings "yes " and "no " need to have a space or ansible will convert to boolean.
>       ssh:
>         kind: record
>         comment: |
>           Settings for the ssh client.</br>
>           Each entry designates an option and its value as used in the sshd configuration file.
>           Beware that the strings "yes " and "no " need to have a space or ansible will convert to boolean.
>   private: ~

diff -r 22.04/its/sssd/defaults/main.yml 24.04/its/sssd/defaults/main.yml
5,8c5,8
<   users_allow: 'any'
<   denied_ad_groups: ~
<   allowed_ad_groups: ~
<   allowed_ad_users: ~
---
>   users_allow: "{{ cmdb.Unibas_MDMLCCMSAuthMethod }}"
>   denied_ad_groups:
>   allowed_ad_groups: "{{ cmdb.Unibas_MDMLCCMSAuthGroup }}"
>   allowed_ad_users:

diff -r 22.04/its/sssd/tasks/main.yml 24.04/its/sssd/tasks/main.yml
19d18
<   become: yes
26d24
<   become: yes
36d33
<   become: yes
51c48
<   become: yes
---
>   when: 'its_sssd.users_allow != "local"'
62d58
<   become: true
69d64
<   become: yes
85d79
<   become: yes
96d89
<   become: yes
103c96
< - name: "Remove sss from nsswitch unless passwd, group, or shadow."
---
> - name: "Remove sss from nsswitch except for passwd, group, or shadow."
109d101
<   become: yes
117d108
<   become: yes
130d120
<   become: yes
139d128
<   become: yes

diff -r 22.04/its/sudoers/defaults/main.yml 24.04/its/sudoers/defaults/main.yml
8c8
<   addOwner: "{{ ((lccms.configuration == 'managed' and lccms.adminRights) or lccms.configuration in ['self-managed', 'unmanaged']) and lccms.ownerUID != '' }}"
---
>   addOwner: "{{ (cmdb.Unibas_AdminRightsGranted or (cmdb.Unibas_Managed in ['selfmanaged', 'unmanaged'])) and cmdb.Owner != '' }}"
11c11
<   owner: "{{ lccms.ownerUID }}"
---
>   owner: "{{ cmdb.Owner }}"

diff -r 22.04/its/update2lts/files/update_to_24.04.sh 24.04/its/update2lts/files/update_to_24.04.sh
6d5
< reboot

diff -r 22.04/its/update2lts/files/update_to_24.04_update.sh 24.04/its/update2lts/files/update_to_24.04_update.sh
12c12
< do-release-upgrade -q DistUpgradeViewNonInteractive
---
> do-release-upgrade -q

diff -r 22.04/its/update2lts/tasks/main.yml 24.04/its/update2lts/tasks/main.yml
2,6d1
< - name: "Copy update script in place"
<   copy:
<     src: "update_to_24.04.sh"
<     dest: "/opt/update_to_24.04.sh"
<     mode: 04555
8,18d2
< - name: "Copy update update script in place"
<   copy:
<     src: "update_to_24.04_update.sh"
<     dest: "/opt/update_to_24.04_update.sh"
<     mode: 04555
< 
< - name: "Copy sudoers file in place"
<   copy:
<     src: "update"
<     dest: "/etc/sudoers.d/update"
<     mode: 0640

diff -r 22.04/its/updates/defaults/main.yml 24.04/its/updates/defaults/main.yml
4c4
<   managementLevel: "{{ lccms.configuration }}"
---
>   managementLevel: "{{ cmdb.Unibas_Managed }}"

diff -r 22.04/its/users/tasks/main.yml 24.04/its/users/tasks/main.yml
18,19c18
< # |localhome  |no        |Only used if the user's home is located elsewhere and automounted to a standard path.  |
< # |passwd     |no        |Only set if a password is to be set on creation of the account. This is ignored if already set. Defaults to *.  |
---
> # |passwd     |no        |The hash to set on creation of the account. This is ignored if already set. Defaults to *.  |
34a34,44
> # Do we need to add any cmdb user?
> - set_fact:
>     addLocal: "{{ (cmdb.Unibas_MDMLCCMSAuthMethod in ['local', 'password']) and not ((cmdb.Owner == '') or (cmdb.Owner == None) or (cmdb.Owner is undefined)) }}"
> 
> - set_fact:
>     users: "{{ its_users.users + [ cmdb.User ]}}"
>   when: addLocal
> 
> - set_fact:
>     users: "{{ its_users.users }}"
>   when: not addLocal
48,49c58,59
< - name: "Load all 'ansible' users from /etc/passwd (ignore error)"
<   command: "/bin/grep ',ansible:' /etc/passwd"
---
> # This will not be shown in the status report.
> - command: "/bin/grep ',ansible:' /etc/passwd"
76c86
<   with_items: "{{ its_users.users }}"
---
>   with_items: "{{ users }}"
86c96
<     name: "{{ item.uid }}"
---
>     name: "{{ item.uid|lower }}"
93c103
<   with_items: "{{ its_users.users }}"
---
>   with_items: "{{ users }}"
101c111
<   when: "item.split(':')[0] not in its_users.users|map(attribute='uid')|list()"
---
>   when: "item.split(':')[0] not in users|map(attribute='uid')|list()"

diff -r 22.04/its/zoom/tasks/main.yml 24.04/its/zoom/tasks/main.yml
2c2
< - name: Install Zoom
---
> - name: Install Zoom.
